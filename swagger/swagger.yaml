swagger: '2.0'
info:
  version: '1.0'
  title: 'Reference manager with automatic PDF analysis '
  description: 'Reference manager with automatic PDF analysis '
# Added by API Auto Mocking Plugin
host: virtserver.swaggerhub.com
basePath: /pje/ReferenceManager/1.0
schemes:
 - https
 - http
tags:
  - name: Publications
  - name: Comments
  - name: User

paths:
  /publications:
    get:
      tags:
      - Publications
      summary: searches all publications
      operationId: searchPublications
      description: |
        Get all publications.
      produces:
      - application/json
      responses:
        200:
          description: All publications
          schema:
            type: array
            items:
              $ref: '#/definitions/PublicationResult'
        400:
          description: bad input parameter
    post:
      tags:
      - Publications
      summary: adds an publication 
      operationId: addPublication
      description: Adds a publication to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: User token
        type: string
      - in: body
        name: Publication
        description: Publication
        schema:
          $ref: '#/definitions/Publication'
      responses:
        200:
          description: Publication created
          
  /publications/{id}:
   get:
      tags:
      - Publications
      summary: get one publication
      operationId: searchPublicationById
      description: |
        Get one publication.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The publication ID
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/Publication'
        404:
          description: publication with given id not exist
   put:
      tags:
      - Publications
      summary: edit one publication
      operationId: editPublicationsById
      description: |
        Edit publication.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The publication ID
        - in: body
          name: Publication
          description: Publication
          schema:
            $ref: '#/definitions/Publication'
      responses:
        200:
          description: search results matching criteria
          schema:
            type: array
            items:
              $ref: '#/definitions/Publication'
        404:
          description: publication with given id not exist
   delete:
      tags:
      - Publications
      summary: delete one publication
      operationId: deletePublicationById
      description: |
        Delete one publication.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The publication ID
      responses:
        200:
          description: deleted publication
          schema:
            type: array
            items:
              $ref: '#/definitions/Publication'
        404:
          description: publication with given id not exist
          
          
  /comments:
    get:
      tags:
      - Comments
      summary: searches all comments
      operationId: searchComments
      description: |
        Get all comments.
      produces:
      - application/json
      responses:
        200:
          description: All comments
          schema:
            type: array
            items:
              $ref: '#/definitions/CommentResult'
    post:
      tags:
      - Comments
      summary: adds an comment 
      operationId: addComment
      description: Adds a comment to the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: header
        name: Authorization
        description: User token
        type: string
      - in: body
        name: Publication
        description: Publication
        schema:
          $ref: '#/definitions/Publication'
      responses:
        200:
          description: Publication created
          
  /comments/{id}:
   get:
      tags:
      - Comments
      summary: get one comment
      operationId: searchCommentById
      description: |
        Get one comment.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The comment ID
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/CommentResult'
        404:
          description: comment with given id not exist
   put:
      tags:
      - Comments
      summary: edit one comment
      operationId: editCommentsById
      description: |
        Edit comment.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The comment ID
        - in: body
          name: Comment
          description: Comment body
          schema:
            $ref: '#/definitions/Comment'
      responses:
        200:
          description: found comment
          schema:
            $ref: '#/definitions/CommentResult'
        404:
          description: comment with given id not exist
   delete:
      tags:
      - Comments
      summary: delete one comment
      operationId: deleteCommentById
      description: |
        Delete one comment.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The comment ID
      responses:
        200:
          description: deleted comment
          schema:
            type: array
            items:
              $ref: '#/definitions/CommentResult'
        404:
          description: comment with given id not exist

  /users:
    get:
      tags:
      - Users
      summary: searches all users
      operationId: searchUsers
      description: |
        Get all users.
      produces:
      - application/json
      responses:
        200:
          description: All users
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResult'
          
  /users/{id}:
   get:
      tags:
      - Users
      summary: get one user
      operationId: searchUserById
      description: |
        Get one user.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The user ID
      responses:
        200:
          description: search results matching criteria
          schema:
            $ref: '#/definitions/UserResult'
        404:
          description: user with given id not exist
   put:
      tags:
      - Users
      summary: edit one user
      operationId: editUsersById
      description: |
        Edit user.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The user ID
        - in: body
          name: User
          description: User body
          schema:
            $ref: '#/definitions/User'
      responses:
        200:
          description: found user
          schema:
            $ref: '#/definitions/UserResult'
        404:
          description: user with given id not exist
   delete:
      tags:
      - Users
      summary: delete one user
      operationId: deleteUserById
      description: |
        Delete one user.
      produces:
      - application/json
      parameters:
        - in: header
          name: Authorization
          description: User token
          type: string
        - in: path
          name: id
          required: true
          type: string
          description: The user ID
      responses:
        200:
          description: deleted user
          schema:
            type: array
            items:
              $ref: '#/definitions/UserResult'
        404:
          description: user with given id not exist
    
  /users/logout:
    post:
          tags:
          - Users
          summary: logoutUser
          operationId: logoutUser
          description: Logout user of system
          consumes:
          - application/json
          produces:
          - application/json
          parameters:
          - in: header
            name: Authorization
            description: User token
            type: string
          - in: body
            name: Publication
            description: Publication
            schema:
              $ref: '#/definitions/Publication'
          responses:
            200:
              description: Publication created

  /users/register:
    post:
      tags:
      - Users
      summary: register an user 
      operationId: registerUser
      description: Register an user in system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        description: User
        schema:
          $ref: '#/definitions/User'
      responses:
        200:
          description: User registered

  /users/auth:
    post:
      tags:
      - Users
      summary: login an user 
      operationId: authUser
      description: Login an user in the system
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: User
        description: User
        schema:
          $ref: '#/definitions/UserLogin'
      responses:
        200:
          description: User registered
    
definitions:
  Publication:
    type: object
    required:
    - name
    - description
    - tags
    - owners
    - authors
    properties:
      name:
        type: string
        example: How to build a car?
      description: 
        type: string
        example: Very interesting publication
      owners:
        type: array
        items:
          type: string
          example: 5fa47e18bd7cd001caec7ca4
      authors:
        type: array
        items:
          type: string
          example: Adam Mickiewicz
          
  PublicationResult:
    type: object 
    properties:
      name:  
        type: string
        example: How to build a car?
      description: 
        type: string
        example: Very interesting publication
      authors:
        type: array
        items:
          type: string
          example: Adam Mickiewicz
      _id:
        type: string
        format: uuid
        example: 5fa47e18bd7cd001caec7ca4
      owners:
        type: array
        items:
          $ref: '#/definitions/UserResult'

          
  User:
    required:
    - username
    - email
    - password
    properties:
      username:
        type: string
        example: jeleniep
      email:
        type: string
        format: email
        example: admin@email.com
      password:
        type: string
        example: password

  UserLogin:
    required:
    - email
    - password
    properties:
      username:
        type: string
        example: jeleniep
      password:
        type: string
        example: password
        
  UserResult:
    required:
    - _id
    - username
    - email
    - profile
    properties:
      _id:
        type: string
        example: 5fa726d665513c010aacea86
      username:
        type: string
        format: url
        example: jeleniep
      email:
        type: string
        format: email
        example: admin@email.com
      profile:
        type: string
        example: USER
        
        
  Comment:
    required:
    - publication
    - body
    - owners
    properties:
      publication:
        type: string
        example: 5fa726d665513c010aacea86
      body:
        type: string
        example: Really nice publication
        
  CommentResult:
    required:
    - _id
    - publication
    - body
    - owners
    properties:
      _id:
        type: string
        example: 5fa726d665513c010aacea86
      publication:
        $ref: '#/definitions/PublicationResult'
      body:
        type: string
        example: Really nice publication
      owners:
        type: array
        items:
          $ref: '#/definitions/UserResult'